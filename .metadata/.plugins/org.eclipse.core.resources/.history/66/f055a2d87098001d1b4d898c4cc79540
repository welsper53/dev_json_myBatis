package com.html;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.util.DBConnectionMgr;


public class MemberDao {
	DBConnectionMgr 	dbMgr = new DBConnectionMgr();
	Connection 			con = null;
	PreparedStatement 	pstmt = null;
	ResultSet 			rs = null;
	
	public List<Map<String, Object>> getMemberList() {
		System.out.println("getmemberList 호출");
		List<Map<String, Object>> memList = null;
		
		StringBuffer sql = new StringBuffer();
		sql.append("select mem_no, mem_id, mem_name from member");
		
		try {
			// 물리적으로 떨어져 있는 오라클 서버에 연결통로
			con = dbMgr.getConnection();
			// 연결통로를 통해서 select문을 가져가고 오라클서버에게 요청하는 객체로딩
			pstmt = con.prepareStatement(sql.toString());
			// 오라클서버의 커서를 조작할 객체로딩
			rs = pstmt.executeQuery();
			
			memList = new ArrayList<Map<String,Object>>();
			Map<String, Object> rmap = null;
			
			while (rs.next()) {
				rmap = new HashMap<String, Object>();
				rmap.put("mem_no", rs.getInt("mem_no"));
				rmap.put("mem_id", rs.getString("mem_id"));
				rmap.put("mem_name", rs.getString("mem_no"));
				
				memList.add(rmap);
			}
			
			System.out.println(memList);
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 사용한 자원을 반납하기 - 명시적으로 반납할것 - 실행시점을 당기기 위해 - 튜닝팀의 권장사항
			dbMgr.freeConnection(con, pstmt, rs);
		}
		
		return memList;
	} // end of getMemberList
	
	
	public String jsonMemberList() {
		System.out.println("getmemberList 호출");
		List<Map<String, Object>> memList = null;
		
		StringBuffer sql = new StringBuffer();
		sql.append("select mem_no, mem_id, mem_name from member");
		
		try {
			// 물리적으로 떨어져 있는 오라클 서버에 연결통로
			con = dbMgr.getConnection();
			// 연결통로를 통해서 select문을 가져가고 오라클서버에게 요청하는 객체로딩
			pstmt = con.prepareStatement(sql.toString());
			// 오라클서버의 커서를 조작할 객체로딩
			rs = pstmt.executeQuery();
			
			memList = new ArrayList<Map<String,Object>>();
			Map<String, Object> rmap = null;
			
			while (rs.next()) {
				rmap = new HashMap<String, Object>();
				rmap.put("mem_no", rs.getInt("mem_no"));
				rmap.put("mem_id", rs.getString("mem_id"));
				rmap.put("mem_name", rs.getString("mem_no"));
				
				memList.add(rmap);
			}
			
//			System.out.println(memList);
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 사용한 자원을 반납하기 - 명시적으로 반납할것 - 실행시점을 당기기 위해 - 튜닝팀의 권장사항
			dbMgr.freeConnection(con, pstmt, rs);
		}
		
		Gson g = new Gson();
		String temp = null;
		temp = g.toJson(memList);
		
		return temp;
	} // end of jsonMemberList
	
	public static void main(String[] args) {
		MemberDao memDao = new MemberDao();
		memDao.getMemberList();
		
		String temp = memDao.jsonMemberList();
		System.out.println(temp);
	}
}
