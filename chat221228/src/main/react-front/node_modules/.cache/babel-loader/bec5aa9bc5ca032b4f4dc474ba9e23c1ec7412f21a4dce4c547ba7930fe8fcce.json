{"ast":null,"code":"import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n//import firebase from 'firebase';\n\nclass AuthLogic {\n  // 생성자 정의 - 자바와는 다르게 선언 없이 초기화 가능하다\n  // firebaseAuth변수명, googleProvider변수명 -> 전역변수\n  constructor() {\n    this.firebaseAuth = getAuth();\n    this.googleProvider = new GoogleAuthProvider();\n  }\n\n  // 로그인 시도 시 구글 인증인지 깃허브 인증인지 문자열로 넘겨받음\n  // 구글 인증인 경우 - Google\n  // 깃허브 인증인 경우 - Github\n  login(providerName) {\n    console.log(\"providerName : \" + providerName);\n    // 파라미터로 넘겨 받은 문자열로 비교하여 각 제공자의 객체 주입받음\n    const authProvider = this.getProvider(providerName);\n\n    // 제공자의 정보이면 팝업을 띄워서 로그인 진행하도록 유도한다\n    return signInWithPopup(this.firebaseAuth, authProvider);\n  }\n\n  // 로그아웃 버튼 클릭 시 호출하기\n  logout() {\n    this.firebaseAuth.signOut();\n  }\n\n  // 사용자가 변경되는지 지속적으로 체크하여 변경될 때마다 호출 됨\n  onAuthChange(onUserChanged) {\n    // 사용자가 바뀌었을 때 콜백함수를 받아서\n    this.firebaseAuth.onAuthStateChanged(user => {\n      //사용자가 바뀔 때마다\n      onUserChanged(user);\n    });\n  }\n  getProvider(providerName) {\n    switch (providerName) {\n      case \"Google\":\n        return this.googleProvider;\n      case \"Github\":\n        return this.githubProvider;\n      default:\n        throw new Error(`not supported provider: ${providerName}`);\n    }\n  }\n}\n\n/* 외부 js에서 사용하려면 반드시 추가할 것 \r\n   왜 리덕스를 공부해야 하나? -> 대답\r\n*/\nexport default AuthLogic;","map":{"version":3,"names":["getAuth","signInWithPopup","GoogleAuthProvider","AuthLogic","constructor","firebaseAuth","googleProvider","login","providerName","console","log","authProvider","getProvider","logout","signOut","onAuthChange","onUserChanged","onAuthStateChanged","user","githubProvider","Error"],"sources":["D:/workspace_java/chat221228/src/main/react-front/src/service/authLogic.js"],"sourcesContent":["import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\n//import firebase from 'firebase';\r\n\r\nclass AuthLogic {\r\n   // 생성자 정의 - 자바와는 다르게 선언 없이 초기화 가능하다\r\n   // firebaseAuth변수명, googleProvider변수명 -> 전역변수\r\n   constructor() {\r\n      this.firebaseAuth = getAuth();\r\n      this.googleProvider = new GoogleAuthProvider();\r\n   }\r\n\r\n   // 로그인 시도 시 구글 인증인지 깃허브 인증인지 문자열로 넘겨받음\r\n   // 구글 인증인 경우 - Google\r\n   // 깃허브 인증인 경우 - Github\r\n   login(providerName) {\r\n      console.log(\"providerName : \" + providerName);\r\n      // 파라미터로 넘겨 받은 문자열로 비교하여 각 제공자의 객체 주입받음\r\n      const authProvider = this.getProvider(providerName);\r\n\r\n      // 제공자의 정보이면 팝업을 띄워서 로그인 진행하도록 유도한다\r\n      return signInWithPopup(this.firebaseAuth, authProvider);\r\n   }\r\n\r\n   // 로그아웃 버튼 클릭 시 호출하기\r\n   logout() {\r\n      this.firebaseAuth.signOut();\r\n   }\r\n\r\n   // 사용자가 변경되는지 지속적으로 체크하여 변경될 때마다 호출 됨\r\n   onAuthChange(onUserChanged) {\r\n      // 사용자가 바뀌었을 때 콜백함수를 받아서\r\n      this.firebaseAuth.onAuthStateChanged((user) => {\r\n         //사용자가 바뀔 때마다\r\n         onUserChanged(user);\r\n      });\r\n   }\r\n\r\n   getProvider(providerName) {\r\n      switch (providerName) {\r\n         case \"Google\":\r\n            return this.googleProvider;\r\n         case \"Github\":\r\n            return this.githubProvider;\r\n         default:\r\n            throw new Error(`not supported provider: ${providerName}`);\r\n      }\r\n   }\r\n\r\n}\r\n\r\n/* 외부 js에서 사용하려면 반드시 추가할 것 \r\n   왜 리덕스를 공부해야 하나? -> 대답\r\n*/\r\nexport default AuthLogic;\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,eAAe;AAC5E;;AAEA,MAAMC,SAAS,CAAC;EACb;EACA;EACAC,WAAWA,CAAA,EAAG;IACX,IAAI,CAACC,YAAY,GAAGL,OAAO,EAAE;IAC7B,IAAI,CAACM,cAAc,GAAG,IAAIJ,kBAAkB,EAAE;EACjD;;EAEA;EACA;EACA;EACAK,KAAKA,CAACC,YAAY,EAAE;IACjBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGF,YAAY,CAAC;IAC7C;IACA,MAAMG,YAAY,GAAG,IAAI,CAACC,WAAW,CAACJ,YAAY,CAAC;;IAEnD;IACA,OAAOP,eAAe,CAAC,IAAI,CAACI,YAAY,EAAEM,YAAY,CAAC;EAC1D;;EAEA;EACAE,MAAMA,CAAA,EAAG;IACN,IAAI,CAACR,YAAY,CAACS,OAAO,EAAE;EAC9B;;EAEA;EACAC,YAAYA,CAACC,aAAa,EAAE;IACzB;IACA,IAAI,CAACX,YAAY,CAACY,kBAAkB,CAAEC,IAAI,IAAK;MAC5C;MACAF,aAAa,CAACE,IAAI,CAAC;IACtB,CAAC,CAAC;EACL;EAEAN,WAAWA,CAACJ,YAAY,EAAE;IACvB,QAAQA,YAAY;MACjB,KAAK,QAAQ;QACV,OAAO,IAAI,CAACF,cAAc;MAC7B,KAAK,QAAQ;QACV,OAAO,IAAI,CAACa,cAAc;MAC7B;QACG,MAAM,IAAIC,KAAK,CAAE,2BAA0BZ,YAAa,EAAC,CAAC;IAAC;EAEpE;AAEH;;AAEA;AACA;AACA;AACA,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}